from reportlab.lib.pagesizes import A4
from reportlab.lib import colors
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
import json

# Load JSON data
json_file_path = r  # Write a path where the json file is stored include it in " "   # Use raw string to avoid issues with backslashes

try:
    with open(json_file_path, 'r', encoding='utf-8-sig') as file:
        data = json.load(file)
    if not data:
        raise ValueError("The JSON file is empty or contains no data.")
except json.JSONDecodeError:
    print(f"Failed to parse JSON file: {json_file_path}. The file might be malformed.")
    exit()
except ValueError as ve:
    print(ve)
    exit()

# Define the output PDF path
pdf_output_path = r #Place where you want to store the report also include name (path format)

# Create a PDF document
pdf = SimpleDocTemplate(pdf_output_path, pagesize=A4)

# Create a list to hold the elements for the PDF
elements = []

# Add a title
title = [['Vulnerability Report']]
table = Table(title)
table.setStyle(TableStyle([('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                           ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                           ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                           ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                           ('FONTSIZE', (0, 0), (-1, 0), 14),
                           ('BOTTOMPADDING', (0, 0), (-1, 0), 12)]))
elements.append(table)

# Add a space after the title
elements.append(Table([['']]))

# Iterate over the software data
for software in data:
    software_name = software.get('SoftwareName', 'N/A')
    software_version = software.get('Version', 'N/A')
    
    # Add software details
    software_details = [[f"Software: {software_name} (Version: {software_version})"]]
    table = Table(software_details)
    table.setStyle(TableStyle([('BACKGROUND', (0, 0), (-1, 0), colors.lightblue),
                               ('TEXTCOLOR', (0, 0), (-1, 0), colors.black),
                               ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                               ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                               ('FONTSIZE', (0, 0), (-1, 0), 12),
                               ('BOTTOMPADDING', (0, 0), (-1, 0), 10)]))
    elements.append(table)

    # Add a table of vulnerabilities
    vulnerabilities = software.get('Vulnerabilities', [])
    if vulnerabilities:
        table_data = [['CVE ID', 'Description']]
        for vuln in vulnerabilities:
            table_data.append([vuln.get('CVE_ID', 'N/A'), vuln.get('Description', 'N/A')])

        table = Table(table_data)
        table.setStyle(TableStyle([('BACKGROUND', (0, 0), (-1, 0), colors.grey),
                                   ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
                                   ('ALIGN', (0, 0), (-1, -1), 'LEFT'),
                                   ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                                   ('FONTSIZE', (0, 0), (-1, 0), 10),
                                   ('BOTTOMPADDING', (0, 0), (-1, 0), 10),
                                   ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
                                   ('GRID', (0, 0), (-1, -1), 1, colors.black)]))
        elements.append(table)

    # Add some space between each software block
    elements.append(Table([['']]))

# Build the PDF document
pdf.build(elements)

print(f"Report successfully generated at {pdf_output_path}")
