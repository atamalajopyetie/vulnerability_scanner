# Define file paths and API endpoint
$jsonFilePath =  # Update this path based on where your file is stored 
$outputFilePath = # Update this path based on where you want to store 
$nvdApiUrl = "https://services.nvd.nist.gov/rest/json/cves/1.0?keyword="

# Initialize an array to hold the results
$vulnerabilityReport = @()

# Load and parse JSON data
try {
    $data = Get-Content -Path $jsonFilePath | ConvertFrom-Json
} catch {
    Write-Error "Failed to read or parse JSON file: $_"
    exit
}

# Extract installed software names and versions
$installedSoftware = $data.InstalledSoftware | ForEach-Object {
    @{
        Name = $_.Name
        Version = $_.Version
    }
}

# Function to fetch vulnerability data from NVD
function Fetch-VulnerabilityData {
    param (
        [string]$keyword
    )

    $url = "$nvdApiUrl$keyword"
    try {
        $response = Invoke-RestMethod -Uri $url -Method Get
        return $response
    } catch {
        Write-Error "Failed to fetch data from NVD for $($keyword): $($_.Exception.Message)"
    }
}

# Analyze each piece of software
foreach ($software in $installedSoftware) {
    $softwareEntry = @{
        SoftwareName = $software.Name
        Version = $software.Version
        Vulnerabilities = @()
    }
    
    $vulnerabilities = Fetch-VulnerabilityData -keyword $software.Name
    
    if ($vulnerabilities -and $vulnerabilities.totalResults -gt 0) {
        foreach ($entry in $vulnerabilities.result.CVE_Items) {
            $cveId = $entry.cve.CVE_data_meta.ID
            $description = $entry.cve.description.description_data[0].value
            
            # Add the CVE details to the software entry
            $softwareEntry.Vulnerabilities += @{
                CVE_ID = $cveId
                Description = $description
            }
        }
    } else {
        $softwareEntry.Vulnerabilities += @{
            CVE_ID = "None"
            Description = "No vulnerabilities found"
        }
    }
    
    # Add the software entry to the report array
    $vulnerabilityReport += $softwareEntry
}

# Convert the report array to JSON and save it to the output file
$vulnerabilityReport | ConvertTo-Json -Depth 5 | Out-File -FilePath $outputFilePath -Encoding utf8

Write-Output "Vulnerability report generated and saved to $outputFilePath"
