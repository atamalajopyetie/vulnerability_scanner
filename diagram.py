import json
from reportlab.lib.pagesizes import letter
from reportlab.lib import colors
from reportlab.lib.styles import getSampleStyleSheet
from reportlab.platypus import SimpleDocTemplate, Table, TableStyle, Paragraph

# Load the JSON data from the file
json_file_path = #include your file path where JSON is stored

try:
    with open(json_file_path, 'r', encoding='utf-8-sig') as file:
        data = json.load(file)
    if not data:
        raise ValueError("The JSON file is empty or contains no data.")
except json.JSONDecodeError:
    print(f"Failed to parse JSON file: {json_file_path}. The file might be malformed.")
    exit()
except ValueError as ve:
    print(ve)
    exit()

# Create a PDF document
pdf_file_path = # write path where you want to store the path with file name
pdf = SimpleDocTemplate(pdf_file_path, pagesize=letter)

# Container for the 'Flowable' objects
elements = []

# Add a title
styles = getSampleStyleSheet()
title = Paragraph("Network Data Report", styles['Title'])
elements.append(title)

# Function to create a table from DataFrame data
def create_table(data, title):
    if not data:
        return Paragraph(f"No data available for {title}", styles['Normal'])
    
    # Log the data being added to the table
    print(f"Adding data to table '{title}': {data}")
    
    # Create table data (including header)
    headers = list(data[0].keys())
    table_data = [headers]  # Header row
    for entry in data:
        table_data.append(list(entry.values()))

    # Create the table
    table = Table(table_data)
    table.setStyle(TableStyle([
        ('BACKGROUND', (0, 0), (-1, 0), colors.grey),
        ('TEXTCOLOR', (0, 0), (-1, 0), colors.whitesmoke),
        ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
        ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
        ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
        ('BACKGROUND', (0, 1), (-1, -1), colors.beige),
        ('GRID', (0, 0), (-1, -1), 1, colors.black),
    ]))
    
    # Add the table title
    elements.append(Paragraph(title, styles['Heading2']))
    elements.append(table)
    elements.append(Paragraph("<br/><br/>", styles['Normal']))

# Add tables to the report
create_table(data.get('ARPTable', []), 'ARP Table')

# Build the PDF
pdf.build(elements)

print(f"Report generated and saved as {pdf_file_path}")
